/* tslint:disable */
/* eslint-disable */
/**
 * WiFi Credentials API
 * An API to manage WiFi credentials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Led
 */
export interface Led {
    /**
     * Id of Led
     * @type {number}
     * @memberof Led
     */
    'id': number;
    /**
     * Led is connected to this ESP32 output pin
     * @type {number}
     * @memberof Led
     */
    'pin': number;
    /**
     * State of Led on/off
     * @type {boolean}
     * @memberof Led
     */
    'isOn': boolean;
}
/**
 * 
 * @export
 * @interface LedStatus
 */
export interface LedStatus {
    /**
     * Id of Led
     * @type {number}
     * @memberof LedStatus
     */
    'id': number;
    /**
     * State of Led on/off
     * @type {boolean}
     * @memberof LedStatus
     */
    'isOn': boolean;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * Error message
     * @type {string}
     * @memberof ModelError
     */
    'error': string;
}
/**
 * 
 * @export
 * @interface MotionMode
 */
export interface MotionMode {
    /**
     * The mode of the motion player running on the esp32
     * @type {string}
     * @memberof MotionMode
     */
    'mode': MotionModeModeEnum;
}

export const MotionModeModeEnum = {
    Player: 'player',
    RemoteControl: 'remote_control',
    Idle: 'idle'
} as const;

export type MotionModeModeEnum = typeof MotionModeModeEnum[keyof typeof MotionModeModeEnum];

/**
 * 
 * @export
 * @interface MotionSpeed
 */
export interface MotionSpeed {
    /**
     * Speed of the motion
     * @type {number}
     * @memberof MotionSpeed
     */
    'speed'?: number;
}
/**
 * 
 * @export
 * @interface Servo
 */
export interface Servo {
    /**
     * Id of Servo
     * @type {number}
     * @memberof Servo
     */
    'id': number;
    /**
     * The PWM pin of the servo is connected to this ESP32 output pin
     * @type {number}
     * @memberof Servo
     */
    'pin': number;
    /**
     * Current target position of the Led in degree
     * @type {number}
     * @memberof Servo
     */
    'position': number;
    /**
     * Minimal PWM value of the Servo
     * @type {number}
     * @memberof Servo
     */
    'minPwm': number;
    /**
     * Maximal PWM value of the Servo
     * @type {number}
     * @memberof Servo
     */
    'maxPwm': number;
    /**
     * Minimal angle the servo is able to reach
     * @type {number}
     * @memberof Servo
     */
    'minAngle': number;
    /**
     * Maximal angle the servo is able to reach
     * @type {number}
     * @memberof Servo
     */
    'maxAngle': number;
}
/**
 * 
 * @export
 * @interface ServoPosition
 */
export interface ServoPosition {
    /**
     * Id of Servo
     * @type {number}
     * @memberof ServoPosition
     */
    'id': number;
    /**
     * Target position of the servos in degree
     * @type {number}
     * @memberof ServoPosition
     */
    'position': number;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * List of all Leds
     * @type {Array<Led>}
     * @memberof Status
     */
    'leds': Array<Led>;
    /**
     * List of all Servos
     * @type {Array<Servo>}
     * @memberof Status
     */
    'servos': Array<Servo>;
}
/**
 * 
 * @export
 * @interface WifiCredential
 */
export interface WifiCredential {
    /**
     * The SSID of the WiFi network
     * @type {string}
     * @memberof WifiCredential
     */
    'ssid': string;
    /**
     * The password of the WiFi network
     * @type {string}
     * @memberof WifiCredential
     */
    'password': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List all Leds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeds: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/config/leds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all servos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServos: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/config/servos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status object off all ESP32 outputs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the list of WiFi credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiCredentials: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/config/wifi/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Led list
         * @param {Array<Led>} led 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLeds: async (led: Array<Led>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'led' is not null or undefined
            assertParamExists('setLeds', 'led', led)
            const localVarPath = `/api/config/leds`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(led, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a servos
         * @param {Array<Servo>} servo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServos: async (servo: Array<Servo>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servo' is not null or undefined
            assertParamExists('setServos', 'servo', servo)
            const localVarPath = `/api/config/servos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update List of WiFi credentials
         * @param {Array<WifiCredential>} wifiCredential List of WiFi credentials to be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWifiCredentials: async (wifiCredential: Array<WifiCredential>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'wifiCredential' is not null or undefined
            assertParamExists('setWifiCredentials', 'wifiCredential', wifiCredential)
            const localVarPath = `/api/config/wifi/credentials`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(wifiCredential, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Turn on/off Led
         * @param {LedStatus} ledStatus Turn Led on or off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedStatus: async (ledStatus: LedStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ledStatus' is not null or undefined
            assertParamExists('updateLedStatus', 'ledStatus', ledStatus)
            const localVarPath = `/api/led`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ledStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Motion speed
         * @param {MotionSpeed} motionSpeed Set target motion speed of all servos, will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMotionSpeed: async (motionSpeed: MotionSpeed, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'motionSpeed' is not null or undefined
            assertParamExists('updateMotionSpeed', 'motionSpeed', motionSpeed)
            const localVarPath = `/api/motion/speed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(motionSpeed, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set target servo position
         * @param {ServoPosition} servoPosition Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServoPosition: async (servoPosition: ServoPosition, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servoPosition' is not null or undefined
            assertParamExists('updateServoPosition', 'servoPosition', servoPosition)
            const localVarPath = `/api/motion/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(servoPosition, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set target servo position
         * @param {MotionMode} motionMode Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServoPosition_1: async (motionMode: MotionMode, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'motionMode' is not null or undefined
            assertParamExists('updateServoPosition_1', 'motionMode', motionMode)
            const localVarPath = `/api/motion/mode`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(motionMode, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List all Leds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLeds(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Led>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLeds(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List all servos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServos(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Servo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServos(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status object off all ESP32 outputs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the list of WiFi credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWifiCredentials(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WifiCredential>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWifiCredentials(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Led list
         * @param {Array<Led>} led 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setLeds(led: Array<Led>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Led>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setLeds(led, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a servos
         * @param {Array<Servo>} servo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setServos(servo: Array<Servo>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Servo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setServos(servo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update List of WiFi credentials
         * @param {Array<WifiCredential>} wifiCredential List of WiFi credentials to be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setWifiCredentials(wifiCredential: Array<WifiCredential>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setWifiCredentials(wifiCredential, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Turn on/off Led
         * @param {LedStatus} ledStatus Turn Led on or off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLedStatus(ledStatus: LedStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLedStatus(ledStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Motion speed
         * @param {MotionSpeed} motionSpeed Set target motion speed of all servos, will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMotionSpeed(motionSpeed: MotionSpeed, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMotionSpeed(motionSpeed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set target servo position
         * @param {ServoPosition} servoPosition Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServoPosition(servoPosition: ServoPosition, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateServoPosition(servoPosition, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set target servo position
         * @param {MotionMode} motionMode Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServoPosition_1(motionMode: MotionMode, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateServoPosition_1(motionMode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List all Leds
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLeds(options?: any): AxiosPromise<Array<Led>> {
            return localVarFp.getLeds(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all servos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServos(options?: any): AxiosPromise<Array<Servo>> {
            return localVarFp.getServos(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status object off all ESP32 outputs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus(options?: any): AxiosPromise<Status> {
            return localVarFp.getStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the list of WiFi credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWifiCredentials(options?: any): AxiosPromise<Array<WifiCredential>> {
            return localVarFp.getWifiCredentials(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Led list
         * @param {Array<Led>} led 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLeds(led: Array<Led>, options?: any): AxiosPromise<Led> {
            return localVarFp.setLeds(led, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a servos
         * @param {Array<Servo>} servo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setServos(servo: Array<Servo>, options?: any): AxiosPromise<Servo> {
            return localVarFp.setServos(servo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update List of WiFi credentials
         * @param {Array<WifiCredential>} wifiCredential List of WiFi credentials to be stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWifiCredentials(wifiCredential: Array<WifiCredential>, options?: any): AxiosPromise<void> {
            return localVarFp.setWifiCredentials(wifiCredential, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Turn on/off Led
         * @param {LedStatus} ledStatus Turn Led on or off
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLedStatus(ledStatus: LedStatus, options?: any): AxiosPromise<void> {
            return localVarFp.updateLedStatus(ledStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Motion speed
         * @param {MotionSpeed} motionSpeed Set target motion speed of all servos, will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMotionSpeed(motionSpeed: MotionSpeed, options?: any): AxiosPromise<void> {
            return localVarFp.updateMotionSpeed(motionSpeed, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set target servo position
         * @param {ServoPosition} servoPosition Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServoPosition(servoPosition: ServoPosition, options?: any): AxiosPromise<void> {
            return localVarFp.updateServoPosition(servoPosition, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set target servo position
         * @param {MotionMode} motionMode Set target position of a servo will work only in remote_control mode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServoPosition_1(motionMode: MotionMode, options?: any): AxiosPromise<void> {
            return localVarFp.updateServoPosition_1(motionMode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List all Leds
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getLeds(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getLeds(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all servos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getServos(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getServos(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status object off all ESP32 outputs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getStatus(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the list of WiFi credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWifiCredentials(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWifiCredentials(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Led list
     * @param {Array<Led>} led 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setLeds(led: Array<Led>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setLeds(led, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a servos
     * @param {Array<Servo>} servo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setServos(servo: Array<Servo>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setServos(servo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update List of WiFi credentials
     * @param {Array<WifiCredential>} wifiCredential List of WiFi credentials to be stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setWifiCredentials(wifiCredential: Array<WifiCredential>, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setWifiCredentials(wifiCredential, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Turn on/off Led
     * @param {LedStatus} ledStatus Turn Led on or off
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateLedStatus(ledStatus: LedStatus, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateLedStatus(ledStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Motion speed
     * @param {MotionSpeed} motionSpeed Set target motion speed of all servos, will work only in remote_control mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateMotionSpeed(motionSpeed: MotionSpeed, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateMotionSpeed(motionSpeed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set target servo position
     * @param {ServoPosition} servoPosition Set target position of a servo will work only in remote_control mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateServoPosition(servoPosition: ServoPosition, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateServoPosition(servoPosition, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set target servo position
     * @param {MotionMode} motionMode Set target position of a servo will work only in remote_control mode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateServoPosition_1(motionMode: MotionMode, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateServoPosition_1(motionMode, options).then((request) => request(this.axios, this.basePath));
    }
}


